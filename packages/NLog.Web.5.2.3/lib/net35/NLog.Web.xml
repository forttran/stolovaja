<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NLog.Web</name>
    </assembly>
    <members>
        <member name="T:NLog.Web.SetupBuilderExtensions">
            <summary>
            Extension methods to setup LogFactory options
            </summary>
        </member>
        <member name="M:NLog.Web.SetupBuilderExtensions.RegisterNLogWeb(NLog.Config.ISetupBuilder)">
            <summary>
            Register the NLog.Web LayoutRenderers before loading NLog config
            </summary>
        </member>
        <member name="T:NLog.Web.SetupExtensionsBuilderExtensions">
            <summary>
            Extension methods to setup NLog extensions, so they are known when loading NLog LoggingConfiguration
            </summary>
        </member>
        <member name="M:NLog.Web.SetupExtensionsBuilderExtensions.RegisterNLogWeb(NLog.Config.ISetupExtensionsBuilder)">
            <summary>
            Register the NLog.Web LayoutRenderers
            </summary>
        </member>
        <member name="M:NLog.Web.SetupExtensionsBuilderExtensions.RegisterAspNetLayoutRenderer(NLog.Config.ISetupExtensionsBuilder,System.String,System.Func{NLog.LogEventInfo,System.Web.HttpContextBase,NLog.Config.LoggingConfiguration,System.Object})">
            <summary>
            Register a custom layout renderer using custom delegate-method <paramref name="layoutMethod" />
            </summary>
            <param name="setupBuilder">Fluent style</param>
            <param name="name">Name of the layout renderer - without ${}.</param>
            <param name="layoutMethod">Delegate method that returns layout renderer output.</param>
        </member>
        <member name="T:NLog.Web.DefaultHttpContextAccessor">
            <summary>
            Provides the HttpContext associated with the current request.
            </summary>
        </member>
        <member name="P:NLog.Web.DefaultHttpContextAccessor.HttpContext">
            <summary>
            HttpContext of the current request.
            </summary>
        </member>
        <member name="T:NLog.Web.IHttpContextAccessor">
            <summary>
            Provides access to the HttpContext
            </summary>
        </member>
        <member name="P:NLog.Web.IHttpContextAccessor.HttpContext">
            <summary>
            HttpContext associated with the current request
            </summary>
        </member>
        <member name="F:NLog.Web.Internal.HostEnvironment.Default">
            <summary>
            The default configuration
            </summary>
        </member>
        <member name="T:NLog.Web.Internal.IHostEnvironment">
            <summary>
            Interface to allow unit testing of System.Web.Hosting.HostingEnvironment based layout renderers
            </summary>
        </member>
        <member name="M:NLog.Web.Internal.IHostEnvironment.MapPath(System.String)">
            <summary>Maps a virtual path to a physical path on the server.</summary>
            <param name="virtualPath">The virtual path (absolute or relative).</param>
            <returns>The physical path on the server specified by <paramref name="virtualPath" />.</returns>
        </member>
        <member name="P:NLog.Web.Internal.IHostEnvironment.SiteName">
            <summary>Gets the name of the site.</summary>
            <returns>The name of the site.</returns>
        </member>
        <member name="T:NLog.Web.Internal.LogEventInfoBuffer">
            <summary>
            A cyclic buffer of <see cref="T:NLog.LogEventInfo"/> object.
            </summary>
        </member>
        <member name="M:NLog.Web.Internal.LogEventInfoBuffer.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.Internal.LogEventInfoBuffer" /> class.
            </summary>
            <param name="size">Buffer size.</param>
            <param name="growAsNeeded">Whether buffer should grow as it becomes full.</param>
            <param name="growLimit">The maximum number of items that the buffer can grow to.</param>
        </member>
        <member name="P:NLog.Web.Internal.LogEventInfoBuffer.Capacity">
            <summary>
            Gets the capacity of the buffer
            </summary>
        </member>
        <member name="P:NLog.Web.Internal.LogEventInfoBuffer.Count">
            <summary>
            Gets the number of items in the buffer
            </summary>
        </member>
        <member name="M:NLog.Web.Internal.LogEventInfoBuffer.Append(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the specified log event to the buffer.
            </summary>
            <param name="eventInfo">Log event.</param>
            <returns>The number of items in the buffer.</returns>
        </member>
        <member name="M:NLog.Web.Internal.LogEventInfoBuffer.GetEventsAndClear">
            <summary>
            Gets the array of events accumulated in the buffer and clears the buffer as one atomic operation.
            </summary>
            <returns>Events in the buffer.</returns>
        </member>
        <member name="M:NLog.Web.Internal.PropertyReader.GetValue``1(System.String,``0,System.Func{``0,System.String,System.Object},System.Boolean)">
            <summary>
            Get value of a property
            </summary>
            <param name="key">key</param>
            <param name="container">Container to perform value lookup using key</param>
            <param name="getVal">function to get a value with this key</param>
            <param name="evaluateAsNestedProperties">evaluate <paramref name="key" /> as a nested property path. E.g. A.B is property B inside A.</param>
            <returns>value</returns>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetApplicationValueLayoutRenderer">
            <summary>
            ASP.NET HttpContext Application Dictionary Item Value.
            </summary>
            <remarks>
            <code>
            ${aspnet-application:item=myvariable} - produces "123"
            ${aspnet-application:item=anothervariable} - produces "01/01/2006 00:00:00"
            ${aspnet-application:item=anothervariable:culture=pl-PL} - produces "2006-01-01 00:00:00"
            ${aspnet-application:item=myvariable:padding=5} - produces "  123"
            ${aspnet-application:item=myvariable:padding=-5} - produces "123  "
            ${aspnet-application:item=stringvariable:upperCase=true} - produces "AAA BBB"
            </code>
            </remarks>
            <example>
            <para>You can set the value of an ASP.NET Application variable by using the following code:</para>
            <code lang="C#">
            <![CDATA[
            HttpContext.Current.Application["myvariable"] = 123;
            HttpContext.Current.Application["stringvariable"] = "aaa BBB";
            HttpContext.Current.Application["anothervariable"] = DateTime.Now;
            ]]>
            </code>
            </example>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetApplication-layout-renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetApplicationValueLayoutRenderer.Item">
            <summary>
            Gets or sets the item variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetApplicationValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetApplicationValueLayoutRenderer.ObjectPath">
            <summary>
            Gets or sets the object-property-navigation-path for lookup of nested property
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetApplicationValueLayoutRenderer.Format">
            <summary>
            Format string for conversion from object to string.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetApplicationValueLayoutRenderer.Culture">
            <summary>
            Gets or sets the culture used for rendering.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetApplicationValueLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetAppBasePathLayoutRenderer">
            <summary>
            Rendering Application BasePath. <see cref="M:NLog.Web.Internal.IHostEnvironment.MapPath(System.String)"/>("~")
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetAppBasePathLayoutRenderer.HostEnvironment">
            <summary>
            Provides access to the current IHostEnvironment
            </summary>
            <returns>IHostEnvironment or <c>null</c></returns>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetAppBasePathLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetAppBasePathLayoutRenderer.InitializeLayoutRenderer">
            <inheritdoc/>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetAppBasePathLayoutRenderer.CloseLayoutRenderer">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer">
            <summary>
            ASP.NET HttpContext Items Dictionary Value.
            </summary>
            <remarks>
            <code>
            ${aspnet-httpcontext-item:myKey} - produces "123"
            ${aspnet-httpcontext-item:anotherKey} - produces "01/01/2006 00:00:00"
            ${aspnet-httpcontext-item:anotherKey:culture=pl-PL} - produces "2006-01-01 00:00:00"
            ${aspnet-httpcontext-item:myKey:padding=5} - produces "  123"
            ${aspnet-httpcontext-item:myKey:padding=-5} - produces "123  "
            ${aspnet-httpcontext-item:stringKey:upperCase=true} - produces "AAA BBB"
            </code>
            </remarks>
            <example>
            <para>You can set the value of an ASP.NET Item variable by using the following code:</para>
            <code lang="C#">
            <![CDATA[
            HttpContext.Current.Items["myKey"] = 123;
            HttpContext.Current.Items["stringKey"] = "aaa BBB";
            HttpContext.Current.Items["anotherKey"] = DateTime.Now;
            ]]>
            </code>
            </example>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-HttpContext-Item-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer.Item">
            <summary>
            Gets or sets the item variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer.ObjectPath">
            <summary>
            Gets or sets the object-property-navigation-path for lookup of nested property.
            In this case the Item should have have any dot notation, as the nested properties path is in this variable
            Example:
            Item="person";
            ObjectPath="Name.First"
            This will emit the First Name property of the object in HttpContext.Items woith the key of 'person' in the collection
            </summary>
            <docgen category='Layout Options' order='20' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the item variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer.EvaluateAsNestedProperties">
            <summary>
            Gets or sets whether the Item string with a dot are evaluated as properties or not
            If ObjectPath is not null, the Item should have no dot notation and nested properties will be automatically
            invoked since ObjectPath is set
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer.Format">
            <summary>
            Format string for conversion from object to string.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer.Culture">
            <summary>
            Gets or sets the culture used for rendering.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase">
            <summary>
            Layout renderers for ASP.NET rendering multiple key/value pairs.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.ItemSeparator">
            <summary>
            Separator between key/value pair, and the next pair. Only used for <see cref="F:NLog.Web.Enums.AspNetRequestLayoutOutputFormat.Flat" />
            </summary>
            <remarks>Render with <see cref="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.GetRenderedItemSeparator(NLog.LogEventInfo)" /></remarks>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.ValueSeparator">
            <summary>
            Separator between value and key. Only used for <see cref="F:NLog.Web.Enums.AspNetRequestLayoutOutputFormat.Flat" />
            </summary>
            <remarks>Render with <see cref="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.GetRenderedValueSeparator(NLog.LogEventInfo)" /></remarks>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.SingleAsArray">
            <summary>
            Get or set whether single key/value-pair be rendered as Json-Array.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.OutputFormat">
            <summary>
            Determines how the output is rendered. Possible Value: FLAT, JSON. Default is FLAT.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.ValuesOnly">
            <summary>
            Only render values if true, otherwise render key/value pairs.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.LowerCaseKeys">
            <summary>
            Convert the key to lowercase if true, otherwise render the raw value of key. Default is false.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.SerializePairs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Serialize multiple key/value pairs
            </summary>
            <param name="pairs">The key/value pairs.</param>
            <param name="builder">Add to this builder.</param>
            <param name="logEvent">Log event for rendering separators.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.SerializeValues(System.Collections.Generic.IEnumerable{System.String},System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Serialize multiple values
            </summary>
            <param name="values">The values.</param>
            <param name="builder">Add to this builder.</param>
            <param name="logEvent">Log event for rendering separators.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.GetRenderedItemSeparator(NLog.LogEventInfo)">
            <summary>
            Get the rendered <see cref="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.ItemSeparator" />
            </summary>
            <param name="logEvent"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.GetRenderedValueSeparator(NLog.LogEventInfo)">
            <summary>
            Get the rendered <see cref="P:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.ValueSeparator" />
            </summary>
            <param name="logEvent"></param>
            <returns></returns>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase.AppendQuoted(System.Text.StringBuilder,System.String)">
            <summary>
            Appends strings with proper quoting for JSON
            </summary>
            <param name="builder"></param>
            <param name="value"></param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase">
            <summary>
            Base class for ASP.NET layout renderers.
            </summary>
        </member>
        <member name="F:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase._httpContextAccessor">
            <summary>
            Context for DI
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase.HttpContextAccessor">
            <summary>
            Provides access to the current request HttpContext.
            </summary>
            <returns>HttpContextAccessor or <c>null</c></returns>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Validates that the HttpContext is available and delegates append to subclasses.<see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the value of layout renderer in the context of the specified log event into <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <remarks>
            Won't be called if <see cref="P:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase.HttpContextAccessor" /> of <see cref="P:NLog.Web.IHttpContextAccessor.HttpContext" /> is <c>null</c>.
            </remarks>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase.CloseLayoutRenderer">
            <inheritdoc />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetLayoutRendererBase.Register(System.String,System.Func{NLog.LogEventInfo,System.Web.HttpContextBase,NLog.Config.LoggingConfiguration,System.Object})">
            <summary>
            Register a custom layout renderer with a callback function <paramref name="func" />. The callback receives the logEvent and the current configuration.
            </summary>
            <param name="name">Name of the layout renderer - without ${}.</param>
            <param name="func">Callback that returns the value for the layout renderer.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetMvcActionRenderer">
            <summary>
            ASP.NET RouteData MVC Action Name.
            </summary>
            <remarks>
            <code>${aspnet-mvc-action}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-MVC-Action-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetMvcActionRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetMvcControllerRenderer">
            <summary>
            ASP.NET RouteData MVC Controller Name.
            </summary>
            <remarks>
            <code>${aspnet-mvc-controller}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-MVC-Controller-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetMvcControllerRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetMvcLayoutRendererBase">
            <summary>
            Base Class for ASP.NET MVC Renderer.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetMvcLayoutRendererBase.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetMvcLayoutRendererBase.MvcDoAppend(System.Text.StringBuilder,NLog.LogEventInfo,System.Web.HttpContextBase)">
            <summary>
            Renders the specified ASP.NET Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
            <param name="context">The current http context.</param>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestClientCertificateLayoutRenderer">
            <summary>
            ASP.NET Client Certificate of the Connection
            </summary>
            <remarks>
            <code>
            ${aspnet-request-client-certificate}
            ${aspnet-request-client-certificate:Verbose=True}
            </code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Request-Client-Certificate-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestClientCertificateLayoutRenderer.Verbose">
            <summary>
            This is passed to the X509Certificate2.ToString(bool) method
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestClientCertificateLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestContentLength">
            <summary>
            ASP.NET request contentlength of the posted body
            </summary>
            <remarks>
            <code>${aspnet-request-contentlength}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Request-ContentLength-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestContentLength.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestContentTypeLayoutRenderer">
            <summary>
            ASP.NET HttpRequest Content-Type Header
            </summary>
            <remarks>
            <code>${aspnet-request-contenttype}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Request-ContentType-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestContentTypeLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer">
            <summary>
            ASP.NET Request Cookie
            </summary>
            <remarks>
            <code>
            ${aspnet-request-cookie:OutputFormat=Flat}
            ${aspnet-request-cookie:OutputFormat=JsonArray}
            ${aspnet-request-cookie:OutputFormat=JsonDictionary}
            ${aspnet-request-cookie:OutputFormat=JsonDictionary:CookieNames=username}
            ${aspnet-request-cookie:OutputFormat=JsonDictionary:Exclude=access_token}
            </code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetRequest-Cookie-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer.Items">
            <summary>
            Cookie names to be rendered.
            If <c>null</c> or empty array, all cookies will be rendered.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer.CookieNames">
            <summary>
            Cookie names to be rendered.
            If <c>null</c> or empty array, all cookies will be rendered.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer.Exclude">
            <summary>
            Gets or sets the keys to exclude from the output. If omitted, none are excluded.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestDurationLayoutRenderer">
            <summary>
            ASP.NET Request Duration
            </summary>
            <remarks>
            <code>${aspnet-request-duration}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Request-Duration-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestDurationLayoutRenderer.Format">
            <summary>
            When no format specified, then just total milliseconds
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestDurationLayoutRenderer.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestDurationLayoutRenderer.InitializeLayoutRenderer">
            <inheritdoc/>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestDurationLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer">
            <summary>
            ASP.NET Request Form Data
            </summary>
            <remarks>
            <code>
            ${aspnet-request-form} - Produces - All Form Data from the Request with each key/value pair separated by a comma.
            ${aspnet-request-form:Include=id,name} - Produces - Only Form Data from the Request with keys "id" and "name".
            ${aspnet-request-form:Exclude=id,name} - Produces - All Form Data from the Request except the keys "id" and "name".
            ${aspnet-request-form:Include=id,name:Exclude=id} - Produces - Only Form Data from the Request with key "name" (<see cref="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Exclude" /> takes precedence over <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Include" />).
            ${aspnet-request-form:ItemSeparator=${newline}} - Produces - All Form Data from the Request with each key/value pair separated by a new line.
            </code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetRequest-Form-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Items">
            <summary>
            Gets or sets the form keys to include in the output.
            
            If <c>null</c> or empty array, all will be included.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Include">
            <summary>
            Gets or sets the form keys to include in the output.  If omitted, all are included.  <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Exclude" /> takes precedence over <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Include" />.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Exclude">
            <summary>
            Gets or sets the form keys to exclude from the output.  If omitted, none are excluded.  <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Exclude" /> takes precedence over <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.Include" />.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer">
            <summary>
            ASP.NET Request Headers
            </summary>
            <remarks>
            <code>
            ${aspnet-request-headers:OutputFormat=Flat}
            ${aspnet-request-headers:OutputFormat=JsonArray}
            ${aspnet-request-headers:OutputFormat=JsonDictionary}
            ${aspnet-request-headers:OutputFormat=JsonDictionary:HeaderNames=username}
            ${aspnet-request-headers:OutputFormat=JsonDictionary:Exclude=access_token}
            </code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetRequest-Headers-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer.Items">
            <summary>
            Header names to be rendered.
            If <c>null</c> or empty array, all headers will be rendered.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer.HeaderNames">
            <summary>
            Header names to be rendered.
            If <c>null</c> or empty array, all headers will be rendered.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer.Exclude">
            <summary>
            Gets or sets the keys to exclude from the output. If omitted, none are excluded.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestHostLayoutRenderer">
            <summary>
            ASP.NET Request DNS name of the remote client
            </summary>
            <remarks>
            <code>${aspnet-request-host}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetRequest-Host-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestHostLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestHttpMethodRenderer">
            <summary>
            ASP.NET Http Request Method (POST / GET)
            </summary>
            <remarks>
            <code>${aspnet-request-method}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetRequest-Method-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestHttpMethodRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer">
            <summary>
            ASP.NET Request IP address of the remote client
            </summary>
            <remarks>
            <code>${aspnet-request-ip}</code> to return the Remote IP
            <code>${aspnet-request-ip:CheckForwardedForHeader=true}</code> to return first element in the X-Forwarded-For header
            <code>${aspnet-request-ip:CheckForwardedForHeaderOffset=1}</code>  to return second element in the X-Forwarded-For header
            <code>${aspnet-request-ip:CheckForwardedForHeaderOffset=-1}</code> to return last element in the X-Forwarded-For header
            <code>${aspnet-request-ip:CheckForwardedForHeaderOffset=1:ForwardedForHeader=myHeader}</code> to return second element in the myHeader header
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Request-IP-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer.ForwardedForHeader">
            <summary>
            The header name to check for the Forwarded-For. Default "X-Forwarded-For". Needs <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer.CheckForwardedForHeader"/>
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer.CheckForwardedForHeader">
            <summary>
            Gets or sets whether the renderer should check value of <see cref="P:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer.ForwardedForHeader"/> header
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer.CheckForwardedForHeaderOffset">
            <summary>
            Gets or sets the array index of the X-Forwarded-For header to use, if the desired client IP is not at
            the zeroth index.  Defaults to zero.  If the index is too large the last array element is returned instead.
            If a negative index is used, this is used as the position from the end of the array.
            Minus one will indicate the last element in the array.  If the negative index is too large the first index
            of the array is returned instead.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestIsWebSocketLayoutRenderer">
            <summary>
            ASP.NET Is Request Web Socket
            </summary>
            <remarks>
            <code>${aspnet-request-is-web-socket}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Request-IsWebSocket-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestIsWebSocketLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestLocalIpLayoutRenderer">
            <summary>
            ASP.NET Local IP of the Connection
            </summary>
            <remarks>
            <code>${aspnet-request-local-ip}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Request-Local-IP-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestLocalIpLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestLocalPortLayoutRenderer">
            <summary>
            ASP.NET Local Port of the Connection
            </summary>
            <remarks>
            <code>${aspnet-request-local-port}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Request-Local-Port-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestLocalPortLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestPostedBodyLayoutRenderer">
            <summary>
            ASP.NET posted body, e.g. FORM or Ajax POST
            </summary>
            <remarks>
            <code>${aspnet-request-posted-body} - Produces - {username:xyz,password:xyz}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Request-posted-body-layout-renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="F:NLog.Web.LayoutRenderers.AspNetRequestPostedBodyLayoutRenderer.NLogPostedRequestBodyKey">
            <summary>
            The object for the key in HttpContext.Items for the POST request body
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestPostedBodyLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetQueryStringLayoutRenderer">
            <summary>
            ASP.NET Request Query String
            </summary>
            <remarks>
            <code>
            ${aspnet-request-querystring:OutputFormat=Flat}
            ${aspnet-request-querystring:OutputFormat=JsonArray}
            ${aspnet-request-querystring:OutputFormat=JsonDictionary}
            </code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetRequest-QueryString-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetQueryStringLayoutRenderer.Items">
            <summary>
            List Query Strings' Key to be rendered from Request.
            If empty, then render all querystrings
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetQueryStringLayoutRenderer.QueryStringKeys">
            <summary>
            List Query Strings' Key to be rendered from Request.
            If empty, then render all querystrings
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetQueryStringLayoutRenderer.Exclude">
            <summary>
            Gets or sets the keys to exclude from the output. If omitted, none are excluded.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetQueryStringLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.LayoutRenderers.AspNetQueryStringLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetQueryStringLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestReferrerRenderer">
            <summary>
            ASP.NET Request Referrer URL String
            </summary>
            <remarks>
            <code>${aspnet-request-referrer}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetRequest-Referrer-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestReferrerRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestRemotePortLayoutRenderer">
            <summary>
            ASP.NET Remote Port of the Connection
            </summary>
            <remarks>
            <code>${aspnet-request-remote-port}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Request-Remote-Port-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestRemotePortLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestRouteParametersRenderer">
            <summary>
            ASP.NET Request Route Parameters
            </summary>
            <remarks>
            <code>
            ${aspnet-request-routeparameters:OutputFormat=Flat}
            ${aspnet-request-routeparameters:OutputFormat=JsonArray}
            ${aspnet-request-routeparameters:OutputFormat=JsonDictionary}
            </code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetRequest-RouteParameters-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestRouteParametersRenderer.Items">
            <summary>
            List Route Parameter' Key to be rendered from Request.
            If empty, then render all parameters
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestRouteParametersRenderer.RouteParameterKeys">
            <summary>
            List Route Parameter' Key to be rendered from Request.
            If empty, then render all parameters
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestRouteParametersRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestServerVariableLayoutRenderer">
            <summary>
            ASP.NET Server Variable.
            </summary>
            <remarks>
            <code>${aspnet-request-servervariable:Item=KeyName}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Request-ServerVariable-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestServerVariableLayoutRenderer.Item">
            <summary>
            Gets or sets the ServerVariables item to be rendered.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestServerVariableLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc />
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer">
            <summary>
            ASP.NET Request URL
            </summary>
            <remarks>
            <code>
            ${aspnet-request-url:IncludeQueryString=true} - produces http://www.example.com/?t=1
            ${aspnet-request-url:IncludeQueryString=false} - produces http://www.example.com/
            ${aspnet-request-url:IncludePort=true} - produces http://www.example.com:80/
            ${aspnet-request-url:IncludePort=false} - produces http://www.example.com/
            ${aspnet-request-url:IncludeScheme=false} - produces www.example.com/
            ${aspnet-request-url:IncludePort=true:IncludeQueryString=true} - produces http://www.example.com:80/?t=1
            </code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetRequest-Url-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.Properties">
            <summary>
            A flags enumeration that controls which of the five portions of the URL are logged.
            Defaults to scheme://host/path, port and query string are by default not logged.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.IncludeQueryString">
            <summary>
            To specify whether to include / exclude the Query string. Default is false.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.IncludePort">
            <summary>
            To specify whether to include / exclude the Port. Default is false.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.IncludeHost">
            <summary>
            To specify whether to exclude / include the host. Default is true.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.IncludeScheme">
            <summary>
            To specify whether to exclude / include the scheme. Ex. 'http' or 'https'.  Default is true.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.IncludePath">
            <summary>
            To specify whether to exclude / include the url-path. Default is true.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestUserAgent">
            <summary>
            ASP.NET Request User Agent String
            </summary>
            <remarks>
            <code>${aspnet-request-useragent}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetRequest-UserAgent-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestUserAgent.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer">
            <summary>
            ASP.NET Request Context variable.
            </summary>
            <remarks>
            <code>
            ${aspnet-request:item=v}
            ${aspnet-request:querystring=v}
            ${aspnet-request:form=v}
            ${aspnet-request:cookie=v}
            ${aspnet-request:header=h}
            ${aspnet-request:serverVariable=v}
            </code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetRequest-layout-renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.Item">
            <summary>
            Gets or sets the item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.QueryString">
            <summary>
            Gets or sets the QueryString variable to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.Form">
            <summary>
            Gets or sets the form variable to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.Cookie">
            <summary>
            Gets or sets the cookie to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.ServerVariable">
            <summary>
            Gets or sets the ServerVariables item to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.Header">
            <summary>
            Gets or sets the Headers item to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetRequestWebSocketRequestedProtocolsLayoutRenderer">
            <summary>
            ASP.NET Web Socket Requested Protocols
            </summary>
            <remarks>
            <code>
            ${aspnet-request-web-socket-requested-protocols:OutputFormat=Flat}
            ${aspnet-request-web-socket-requested-protocols:OutputFormat=JsonArray}
            </code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Request-WebSocket-Requested-Protocols-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetRequestWebSocketRequestedProtocolsLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetResponseContentLength">
            <summary>
            ASP.NET Response ContentLength
            </summary>
            <remarks>
            <code>${aspnet-response-contentlength}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Response-ContentLength-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseContentLength.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetResponseContentTypeLayoutRenderer">
            <summary>
            ASP.NET HttpResponse Content-Type Header
            </summary>
            <remarks>
            <code>${aspnet-request-contenttype}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Response-ContentType-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseContentTypeLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer">
            <summary>
            ASP.NET Response Cookie
            </summary>
            <remarks>
            <code>
            ${aspnet-response-cookie:OutputFormat=Flat}
            ${aspnet-response-cookie:OutputFormat=JsonArray}
            ${aspnet-response-cookie:OutputFormat=JsonDictionary}
            ${aspnet-response-cookie:OutputFormat=JsonDictionary:CookieNames=username}
            ${aspnet-response-cookie:OutputFormat=JsonDictionary:Exclude=access_token}
            </code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Response-Cookie-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.ObjectSeparator">
            <summary>
            Separator between objects, like cookies. Only used for <see cref="F:NLog.Web.Enums.AspNetRequestLayoutOutputFormat.Flat" />
            </summary>
            <remarks>Render with <see cref="M:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.GetRenderedObjectSeparator(NLog.LogEventInfo)" /></remarks>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.Items">
            <summary>
            Cookie names to be rendered.
            If <c>null</c> or empty array, all cookies will be rendered.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.CookieNames">
            <summary>
            Cookie names to be rendered.
            If <c>null</c> or empty array, all cookies will be rendered.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.Verbose">
            <summary>
            Render all of the cookie properties, such as Daom and Path, not merely Name and Value
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.Exclude">
            <summary>
            Gets or sets the keys to exclude from the output. If omitted, none are excluded.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.GetRenderedObjectSeparator(NLog.LogEventInfo)">
            <summary>
            Get the rendered <see cref="P:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.ObjectSeparator" />
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.AppendJsonProperty(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Append the quoted name and value separated by a colon
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.AppendFlatProperty(System.Text.StringBuilder,System.String,System.String,System.String,System.String)">
            <summary>
            Append the quoted name and value separated by a value separator
            and ended by item separator
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer.GetCookies(System.Web.HttpResponseBase)">
            <summary>
            Method to get cookies for .NET Framework
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetResponseHasStartedLayoutRenderer">
            <summary>
            ASP.NET response headers already sent, in other words the response has started
            </summary>
            <remarks>
            <code>${aspnet-response-has-started}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Response-HasStarted-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseHasStartedLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetResponseHeadersLayoutRenderer">
            <summary>
            ASP.NET Response Headers
            </summary>
            <remarks>
            <code>
            ${aspnet-response-headers:OutputFormat=Flat}
            ${aspnet-response-headers:OutputFormat=JsonArray}
            ${aspnet-response-headers:OutputFormat=JsonDictionary}
            ${aspnet-response-headers:OutputFormat=JsonDictionary:HeaderNames=username}
            ${aspnet-response-headers:OutputFormat=JsonDictionary:Exclude=access_token}
            </code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-Response-Headers-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetResponseHeadersLayoutRenderer.Items">
            <summary>
            Header names to be rendered.
            If <c>null</c> or empty array, all headers will be rendered.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetResponseHeadersLayoutRenderer.HeaderNames">
            <summary>
            Header names to be rendered.
            If <c>null</c> or empty array, all headers will be rendered.
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetResponseHeadersLayoutRenderer.Exclude">
            <summary>
            Gets or sets the keys to exclude from the output. If omitted, none are excluded.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseHeadersLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.LayoutRenderers.AspNetResponseHeadersLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseHeadersLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetResponseStatusCodeRenderer">
            <summary>
            ASP.NET Response Status Code.
            </summary>
            <remarks>
            <code>${aspnet-response-statuscode}          emits the http status code as integer</code>
            <code>${aspnet-response-statuscode:Format=D} emits the http status code as integer</code>
            <code>${aspnet-response-statuscode:Format=F} emits the http status code as enum-string-value</code>
            <code>${aspnet-response-statuscode:Format=G} emits the http status code as enum-string-value</code>
            <code>${aspnet-response-statuscode:Format=X} emits the http status code as hexadecimal</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetResponse-StatusCode-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetResponseStatusCodeRenderer.Format">
            <summary>
            A valid enumeration format string, defaults to integer format
            </summary>
            <remarks>
            Supported Values, Case Insensitive
            D: outputs the HttpStatusCode enum as a integer
            F: outputs the HttpStatusCode enum as a string if possible, otherwise an integer
            G: outputs the HttpStatusCode enum as a string if possible, otherwise an integer
            X: outputs the HttpStatusCode enum as a hexadecimal
            </remarks>
            <seealso href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/enumeration-format-strings">Documentation on Enum Format Strings</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetResponseStatusCodeRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetSessionIdLayoutRenderer">
            <summary>
            ASP.NET Session ID.
            </summary>
            <remarks>
            <code>${aspnet-sessionid}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetSessionId-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetSessionIdLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer">
            <summary>
            ASP.NET Session Dictionary Item Value
            </summary>
            <remarks>
            <code>
            ${aspnet-session-item:myKey} - produces "123"
            ${aspnet-session-item:anotherKey} - produces "01/01/2006 00:00:00"
            ${aspnet-session-item:anotherKey:culture=pl-PL} - produces "2006-01-01 00:00:00"
            ${aspnet-session-item:myKey:padding=5} - produces "  123"
            ${aspnet-session-item:myKey:padding=-5} - produces "123  "
            ${aspnet-session-item:stringKey:upperCase=true} - produces "AAA BBB"
            </code>
            </remarks>
            <example>
            <para>You can set the value of an ASP.NET Session variable by using the following code:</para>
            <code lang="C#">
            <![CDATA[
            HttpContext.Current.Session["myKey"] = 123;
            HttpContext.Current.Session["stringKey"] = "aaa BBB";
            HttpContext.Current.Session["anotherKey"] = DateTime.Now;
            ]]>
            </code>
            </example>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetSession-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.Item">
            <summary>
            Gets or sets the session item name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the session item name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.ObjectPath">
            <summary>
            Gets or sets the object-property-navigation-path for lookup of nested property
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.EvaluateAsNestedProperties">
            <summary>
            Gets or sets whether variables with a dot are evaluated as properties or not
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.Format">
            <summary>
            Format string for conversion from object to string.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.Culture">
            <summary>
            Gets or sets the culture used for rendering.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetTraceIdentifierLayoutRenderer">
            <summary>
            ASP.NET Request TraceIdentifier.
            </summary>
            <remarks>
            <code>${aspnet-traceidentifier}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetTraceIdentifier-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetTraceIdentifierLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc />
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetTraceIdentifierLayoutRenderer.IgnoreActivityId">
            <summary>
            Ignore the System.Diagnostics.Activity.Current.Id value (AspNetCore3 uses ActivityId by default)
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetTraceIdentifierLayoutRenderer.LookupTraceIdentifier(System.Web.HttpContextBase)">
             <summary>
             Requires IIS ETW feature enabled. https://docs.microsoft.com/en-us/iis/configuration/system.webServer/httpTracing/
            
             See also http://blog.tatham.oddie.com.au/2012/02/07/code-request-correlation-in-asp-net/
             </summary>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetUserAuthTypeLayoutRenderer">
            <summary>
            ASP.NET User Identity AuthenticationType
            </summary>
            <remarks>
            <code>${aspnet-user-authtype}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetUserAuthType-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetUserAuthTypeLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetUserIdentityLayoutRenderer">
            <summary>
            ASP.NET User Identity Name
            </summary>
            <remarks>
            <code>${aspnet-user-identity}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNetUserIdentity-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetUserIdentityLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetUserIsAuthenticatedLayoutRenderer">
            <summary>
            ASP.NET User Identity Authenticated? (0 = not authenticated, 1 = authenticated)
            </summary>
            <remarks>
            <code>${aspnet-user-isAuthenticated}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AspNet-User-isAuthenticated-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetUserIsAuthenticatedLayoutRenderer.DoAppend(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AspNetWebRootPathLayoutRenderer">
            <summary>
            Rendering WebRootPath. <see cref="M:System.Web.Hosting.HostingEnvironment.MapPath(System.String)"/>("/")
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AspNetWebRootPathLayoutRenderer.WebHostEnvironment">
            <summary>
            Provides access to the current IHostEnvironment
            </summary>
            <returns>IHostEnvironment or <c>null</c></returns>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetWebRootPathLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AspNetWebRootPathLayoutRenderer.CloseLayoutRenderer">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.AssemblyVersionLayoutRenderer">
            <summary>
            Extend NLog.LayoutRenderers.AssemblyVersionLayoutRenderer with ASP.NET Full and Core support
            </summary>
            <remarks>
            <code>${assembly-version}</code>
            </remarks>
            <seealso href="https://github.com/NLog/NLog/wiki/AssemblyVersion-Layout-Renderer">Documentation on NLog Wiki</seealso>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.AssemblyVersionLayoutRenderer.FixThreadAgnostic">
            <summary>
            Support capture of Assembly-Version from active HttpContext ApplicationInstance
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AssemblyVersionLayoutRenderer.InitializeLayoutRenderer">
            <inheritdoc />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.AssemblyVersionLayoutRenderer.GetAssembly">
            <inheritdoc />
        </member>
        <member name="T:NLog.Web.LayoutRenderers.IISInstanceNameLayoutRenderer">
            <summary>
            Rendering site name in IIS. <see cref="P:System.Web.Hosting.HostingEnvironment.SiteName"/>
            </summary>
        </member>
        <member name="P:NLog.Web.LayoutRenderers.IISInstanceNameLayoutRenderer.HostEnvironment">
            <summary>
            Provides access to the current IHostEnvironment
            </summary>
            <returns>IHostEnvironment or <c>null</c></returns>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.IISInstanceNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <inheritdoc />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.IISInstanceNameLayoutRenderer.CloseLayoutRenderer">
            <inheritdoc/>
        </member>
        <member name="T:NLog.Web.LayoutRenderers.NLogWebFuncLayoutRenderer">
            <summary>
            Specialized layout render which has a cached <see cref="T:NLog.Web.IHttpContextAccessor"/>
            </summary>
        </member>
        <member name="M:NLog.Web.LayoutRenderers.NLogWebFuncLayoutRenderer.CloseLayoutRenderer">
            <inheritdoc />
        </member>
        <member name="M:NLog.Web.LayoutRenderers.NLogWebFuncLayoutRenderer.RenderValue(NLog.LogEventInfo)">
            <inheritdoc />
        </member>
        <member name="T:NLog.Web.NLogHttpModule">
            <summary>
            ASP.NET HttpModule that enables NLog to hook BeginRequest and EndRequest events easily.
            </summary>
        </member>
        <member name="E:NLog.Web.NLogHttpModule.EndRequest">
            <summary>
            Event to be raised at the end of each HTTP Request.
            </summary>
        </member>
        <member name="E:NLog.Web.NLogHttpModule.BeginRequest">
            <summary>
            Event to be raised at the beginning of each HTTP Request.
            </summary>
        </member>
        <member name="M:NLog.Web.NLogHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes the HttpModule.
            </summary>
            <param name="application">
            ASP.NET application.
            </param>
        </member>
        <member name="M:NLog.Web.NLogHttpModule.Dispose">
            <summary>
            Disposes the module.
            </summary>
        </member>
        <member name="T:NLog.Web.NLogRequestLoggingModule">
            <summary>
            HttpModule that writes all requests to Logger named "RequestLogging"
            </summary>
        </member>
        <member name="P:NLog.Web.NLogRequestLoggingModule.DurationThresholdMs">
            <summary>
            Get or set duration time in milliseconds, before a HttpRequest is seen as slow (Logged as warning)
            </summary>
        </member>
        <member name="P:NLog.Web.NLogRequestLoggingModule.ExcludeRequestPaths">
            <summary>
            Gets or sets request-paths where LogLevel should be reduced (Logged as debug)
            </summary>
        </member>
        <member name="M:NLog.Web.NLogRequestLoggingModule.#ctor">
            <summary>
            Initializes new instance of the <see cref="T:NLog.Web.NLogRequestLoggingModule"/> class
            </summary>
        </member>
        <member name="M:NLog.Web.NLogRequestLoggingModule.#ctor(NLog.Logger)">
            <summary>
            Initializes new instance of the <see cref="T:NLog.Web.NLogRequestLoggingModule"/> class
            </summary>
        </member>
        <member name="T:NLog.Web.NLogRequestPostedBodyModule">
            <summary>
            HttpModule that enables ${aspnet-request-posted-body}
            </summary>
        </member>
        <member name="P:NLog.Web.NLogRequestPostedBodyModule.MaxContentLength">
            <summary>
            The maximum request posted body size that will be captured. Defaults to 30KB.
            </summary>
        </member>
        <member name="P:NLog.Web.NLogRequestPostedBodyModule.AllowContentTypes">
            <summary>
            Prefix and suffix values to be accepted as ContentTypes. Ex. key-prefix = "application/" and value-suffix = "json"
            </summary>
        </member>
        <member name="M:NLog.Web.NLogRequestPostedBodyModule.#ctor">
            <summary>
            Initializes new instance of the <see cref="T:NLog.Web.NLogRequestPostedBodyModule"/> class
            </summary>
        </member>
        <member name="M:NLog.Web.NLogRequestPostedBodyModule.GetString(System.IO.Stream)">
            <summary>
            Reads the posted body stream into a string
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:NLog.Web.Targets.AspNetTraceTarget">
            <summary>
            Writes log messages to the ASP.NET trace.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/AspNetTrace-target">Documentation on NLog Wiki</seealso>
            <remarks>
            Log entries can then be viewed by navigating to http://server/path/Trace.axd.
            </remarks>
        </member>
        <member name="M:NLog.Web.Targets.AspNetTraceTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayout"/> class.
            </summary>
            <remarks>
            The default value of the layout is: 
            <code>
            ${longdate}|${level:uppercase=true}|${logger}|${message}
            </code>
            </remarks>
        </member>
        <member name="M:NLog.Web.Targets.AspNetTraceTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the ASP.NET Trace facility. 
            If the log level is greater than or equal to <see cref="F:NLog.LogLevel.Warn"/> it uses the
            System.Web.TraceContext.Warn method, otherwise it uses
            System.Web.TraceContext.Write method.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper">
            <summary>
            Buffers log events for the duration of ASP.NET request and sends them down 
            to the wrapped target at the end of a request.
            </summary>
            <seealso href="https://github.com/nlog/nlog/wiki/AspNetBufferingWrapper-target">Documentation on NLog Wiki</seealso>
            <remarks>
            <p>
            Typically this target is used in cooperation with PostFilteringTargetWrapper
            to provide verbose logging for failing requests and normal or no logging for
            successful requests. We need to make the decision of the final filtering rule
            to apply after all logs for a page have been generated.
            </p>
            <p>
            To use this target, for classic ASP.NET you need to add an entry in the httpModules section of
            web.config:
            </p>
            <code lang="XML">
            <![CDATA[<?xml version="1.0" ?>
            <configuration>
              <system.web>
                <httpModules>
                  <add name="NLog" type="NLog.Web.NLogHttpModule, NLog.Web"/>
                </httpModules>
              </system.web>
            </configuration>
            ]]>
            </code>
            to use this target, for ASP.NET Core, you need to add a line fo code to involve the proper middleware
            <code>
            <![CDATA[
               app.UseMiddleware<NLogBufferingTargetWrapperMiddleware>();
            ]]>
            </code>
            </remarks>
            <example>
            <p>To set up the ASP.NET Buffering target wrapper <a href="config.html">configuration file</a>, put
            the following in <c>web.nlog</c> file in your web application directory (this assumes
            that PostFilteringWrapper is used to provide the filtering and actual logs go to
            a file).
            </p>
            <code lang="XML" source="examples/targets/Configuration File/ASPNetBufferingWrapper/web.nlog" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To configure the target programmatically, put the following
            piece of code in your <c>Application_OnStart()</c> handler in Global.asax.cs 
            or some other place that gets executed at the very beginning of your code:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/ASPNetBufferingWrapper/Global.asax.cs" />
            <p>
            Fully working C# project can be found in the <c>Examples/Targets/Configuration API/ASPNetBufferingWrapper</c>
            directory along with usage instructions.
            </p>
            </example>
        </member>
        <member name="M:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="P:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper.BufferSize">
            <summary>
            Gets or sets the number of log events to be buffered.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper.GrowBufferAsNeeded">
            <summary>
            Gets or sets a value indicating whether buffer should grow as needed.
            </summary>
            <value>A value of <c>true</c> if buffer should grow as needed; otherwise, <c>false</c>.</value>
            <remarks>
            Value of <c>true</c> causes the buffer to expand until <see cref="P:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper.BufferGrowLimit"/> is hit,
            <c>false</c> causes the buffer to never expand and lose the earliest entries in case of overflow.
            </remarks>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper.BufferGrowLimit">
            <summary>
            Gets or sets the maximum number of log events that the buffer can keep.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="M:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper.InitializeTarget">
            <inheritdoc/>
        </member>
        <member name="M:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper.CloseTarget">
            <inheritdoc/>
        </member>
        <member name="M:NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the specified log event to the buffer.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Web.Enums.AspNetRequestLayoutOutputFormat">
            <summary>
            To control the Renderer Output formatting.
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestLayoutOutputFormat.Flat">
            <summary>
            Use this format for rendering the output value as a flat string.
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestLayoutOutputFormat.JsonArray">
            <summary>
            Use this format for rendering the output value as a json-array
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestLayoutOutputFormat.Json">
            <summary>
            Use this format for rendering the output value as a json formatted string.
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestLayoutOutputFormat.JsonDictionary">
            <summary>
            Use this format for rendering the output value as a json-dictionary
            </summary>
        </member>
        <member name="T:NLog.Web.Enums.AspNetRequestUrlProperty">
            <summary>
            Controls which portions of the URL are logged
            This is a Flags enumeration
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestUrlProperty.None">
            <summary>
            Microsoft recommends a Flags enum to have a None=0 value.
            See https://docs.microsoft.com/en-us/dotnet/api/system.flagsattribute?view=net-6.0
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestUrlProperty.Scheme">
            <summary>
            To specify whether to exclude / include the scheme.  Ex. 'http' or 'https'
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestUrlProperty.Host">
            <summary>
            To specify whether to exclude / include the host.
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestUrlProperty.Port">
            <summary>
            To specify whether to include / exclude the Port.
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestUrlProperty.Path">
            <summary>
            To specify whether to exclude / include the url-path.
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestUrlProperty.Query">
            <summary>
            To specify whether to include / exclude the Query string.
            </summary>
        </member>
        <member name="F:NLog.Web.Enums.AspNetRequestUrlProperty.Default">
            <summary>
            By default, log the scheme://host/path
            </summary>
        </member>
        <member name="T:NLog.Web.Layouts.W3CExtendedLogField">
            <summary>
            Field in W3C Extended Formatted event
            </summary>
        </member>
        <member name="M:NLog.Web.Layouts.W3CExtendedLogField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.Layouts.W3CExtendedLogField" /> class.
            </summary>
        </member>
        <member name="M:NLog.Web.Layouts.W3CExtendedLogField.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.Layouts.W3CExtendedLogField" /> class.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="layout">The layout of the column.</param>
        </member>
        <member name="P:NLog.Web.Layouts.W3CExtendedLogField.Name">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <remarks>
            Standard field prefixes:<br/>
             * s- = server details<br/>
             * c- = client details<br/>
             * cs- = client to server request details<br/>
             * sc- = server to client response details<br/>
            </remarks>
            <docgen category='W3C Field Options' order='10' />
        </member>
        <member name="P:NLog.Web.Layouts.W3CExtendedLogField.Layout">
            <summary>
            Gets or sets the layout of the field.
            </summary>
            <docgen category='W3C Field Options' order='10' />
        </member>
        <member name="T:NLog.Web.Layouts.W3CExtendedLogLayout">
            <summary>
            A specialized layout that renders W3C Extended Log Format (ELF).
            </summary>
        </member>
        <member name="P:NLog.Web.Layouts.W3CExtendedLogLayout.Fields">
            <summary>
            Gets the array of extended fields to include
            </summary>
            <docgen category='W3C Options' order='10' />
        </member>
        <member name="P:NLog.Web.Layouts.W3CExtendedLogLayout.Directives">
            <summary>
            Gets the array of directive headers to include
            </summary>
            <docgen category='W3C Options' order='10' />
        </member>
        <member name="P:NLog.Web.Layouts.W3CExtendedLogLayout.LineEnding">
            <summary>
            Newline to append after each directive header
            </summary>
        </member>
        <member name="M:NLog.Web.Layouts.W3CExtendedLogLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.Layouts.W3CExtendedLogLayout"/> class.
            </summary>
        </member>
        <member name="M:NLog.Web.Layouts.W3CExtendedLogLayout.InitializeLayout">
            <inheritdoc />
        </member>
        <member name="M:NLog.Web.Layouts.W3CExtendedLogLayout.RenderFormattedMessage(NLog.LogEventInfo,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:NLog.Web.Layouts.W3CExtendedLogLayout.W3CExtendedHeaderLayout.#ctor(NLog.Web.Layouts.W3CExtendedLogLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Web.Layouts.W3CExtendedLogLayout.W3CExtendedHeaderLayout"/> class.
            </summary>
        </member>
        <member name="M:NLog.Web.Layouts.W3CExtendedLogLayout.W3CExtendedHeaderLayout.Precalculate(NLog.LogEventInfo)">
            <inheritdoc />
        </member>
        <member name="M:NLog.Web.Layouts.W3CExtendedLogLayout.W3CExtendedHeaderLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <inheritdoc />
        </member>
        <member name="M:NLog.Web.Layouts.W3CExtendedLogLayout.W3CExtendedHeaderLayout.RenderFormattedMessage(NLog.LogEventInfo,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
